<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
 * 라운지 매퍼 XML
 * @author 조희정
 * @since 2024.08.25
 * @version 1.0
 *
 * <pre>
 * 수정일        	수정자        수정내용
 * ==========  =========    =========
 * 2024.08.25  	조희정        최초 생성
 * 2024.08.25  	조희정       라운지 목록 조회 기능 구현
 * 2024.08.26  	조희정       라운지 홈 조회, 게시글 상세 조회 구현
 * 2024.08.27  	조희정       게시글 생성, 삭제 구현
 * 2024.08.28  	조희정       게시글 수정, 댓글 삭제, 댓글 수정 구현
 * 2024.08.29  	조희정       출석 시작 구현
 * 2024.08.30  	조희정       출석 정보 수정 구현
 * </pre>
 -->
<mapper namespace="com.innerpeace.themoonha.domain.lounge.mapper.LoungeMapper">

    <!-- 작성자 정보 -->
    <resultMap id="LoungeMemberMap" type="com.innerpeace.themoonha.domain.lounge.dto.LoungeMemberDTO">
        <id property="memberId" column="member_id"/>
        <result property="name" column="name"/>
        <result property="profileImgUrl" column="profile_img_url" />
    </resultMap>

    <!--댓글 정보-->
    <resultMap id="LoungeCommentMap" type="com.innerpeace.themoonha.domain.lounge.dto.LoungeCommentDTO">
        <id property="loungeCommentId" column="lounge_comment_id"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <association property="loungeMember" resultMap="LoungeMemberMap"/>
    </resultMap>

    <!-- LoungePostDTO -->
    <resultMap id="LoungePostMap" type="com.innerpeace.themoonha.domain.lounge.dto.LoungePostDTO">
        <id property="loungePostId" column="lounge_post_id"/>
        <result property="content" column="content"/>
        <result property="noticeYn" column="notice_yn"/>
        <result property="createdAt" column="created_at"/>
        <association property="loungeMember" resultMap="LoungeMemberMap"/>
    </resultMap>

    <!-- LoungePostDetailDTO -->
    <resultMap id="LoungePostDetailMap" type="com.innerpeace.themoonha.domain.lounge.dto.LoungePostDetailDTO" extends="LoungePostMap">
        <association property="loungePost" resultMap="LoungePostMap"/>
        <collection property="loungeCommentList" ofType="com.innerpeace.themoonha.domain.lounge.dto.LoungeCommentDTO" resultMap="LoungeCommentMap"/>
    </resultMap>

    <!-- 라운지 목록 조회 -->
    <select id="selectLoungeList"
            resultType="com.innerpeace.themoonha.domain.lounge.dto.LoungeListResponse">
        SELECT /*+ INDEX_DESC(lp PK_LOUNGE_POST) */
            lo.lounge_id,
            le.title,
            lo.lounge_img_url,
            lp.created_at AS latest_post_time
        FROM
            lounge lo
            JOIN lesson le ON lo.lesson_id = le.lesson_id
            LEFT JOIN lounge_post lp ON lo.lounge_id = lp.lounge_id
            AND lp.created_at = (
                SELECT /*+ INDEX_DESC(lp PK_LOUNGE_POST) */
                    MAX(created_at)
                FROM lounge_post
                WHERE lounge_id = lo.lounge_id
                    AND deleted_at IS NULL
            )
        WHERE
            lo.deleted_at IS NULL
            AND le.deleted_at IS NULL
            <if test="role == 'ROLE_MEMBER'">
                AND lo.lesson_id IN (
                    SELECT s.lesson_id
                    FROM sugang s
                    WHERE s.member_id = #{memberId}
                        AND s.lounge_yn = 1
                        AND s.deleted_at IS NULL
                )
            </if>
            <if test="role == 'ROLE_TUTOR'">
                AND le.member_id = #{memberId}
            </if>
            AND (lp.lounge_post_id IS NULL OR lp.deleted_at IS NULL)
        ORDER BY
            lo.lounge_id DESC
    </select>

    <!-- 라운지 기본 정보 조회 -->
    <select id="selectLoungeInfo"
            resultType="com.innerpeace.themoonha.domain.lounge.dto.LoungeInfoDTO">
        SELECT
            le.lesson_id,
            le.title,
            lo.lounge_img_url,
            m.member_id AS tutor_id,
            m.name AS tutor_name,
            le.summary
        FROM
            lesson le
                JOIN member m ON le.member_id = m.member_id
                JOIN lounge lo ON le.lesson_id = lo.lesson_id
        WHERE
            lo.lounge_id = #{loungeId}
    </select>

    <!-- 라운지 게시글 목록 조회 -->
    <select id="selectLoungePostList"
            resultMap="LoungePostMap">
        SELECT /*+ INDEX_ASC(lp PK_LOUNGE_POST) ORDERED */
            lp.lounge_post_id,
            lp.content,
            lp.notice_yn,
            lp.created_at,
            lm.member_id,
            lm.name,
            lm.profile_img_url
        FROM
            lounge_post lp
                LEFT JOIN member lm ON lp.member_id = lm.member_id
        WHERE
            lp.lounge_id = #{loungeId}
            AND lp.deleted_at IS NULL
        ORDER BY
            lp.lounge_post_id DESC
    </select>

    <!-- 라운지 게시글 당 이미지 조회 -->
    <select id="selectLoungePostImgList"
            resultType="string">
        SELECT /*+ INDEX_ASC(lpi PK_LOUNGE_POST_IMG) ORDERED */
            lpi.post_img_url
        FROM
            lounge_post_img lpi
        WHERE
            lpi.lounge_post_id = #{loungePostId}
            AND lpi.deleted_at IS NULL
        ORDER BY
            lpi.lounge_post_img_id ASC
    </select>

    <!-- 라운지 수강생 출석 조회 -->
    <select id="selectAttendanceList"
            resultType="com.innerpeace.themoonha.domain.lounge.dto.AttendanceDTO">
        SELECT /*+ INDEX_ASC(a PK_ATTENDANCE) INDEX_ASC(sm PK_MEMBER) */
            a.attendance_id,
            a.attendance_date,
            a.attendance_yn,
            sm.member_id,
            sm.name
        FROM
            attendance a
                JOIN sugang s ON a.sugang_id = s.sugang_id
                LEFT JOIN member sm ON s.member_id = sm.member_id
        WHERE
            s.lesson_id = (
                SELECT lesson_id
                FROM lounge
                WHERE lounge_id = #{loungeId}
                )
            AND s.deleted_at IS NULL
            <if test="role == 'ROLE_MEMBER'">
                AND s.member_id = #{memberId}
            </if>
        ORDER BY
            a.attendance_date ASC,
            sm.name ASC
    </select>

    <!-- 라운지 참여자 조회 -->
    <select id="selectLoungeMemberList"
            resultType="com.innerpeace.themoonha.domain.lounge.dto.LoungeMemberDTO">
        SELECT /*+ INDEX_ASC(m PK_MEMBER) */
            m.member_id,
            m.name,
            m.profile_img_url
        FROM
            sugang su
                JOIN member m ON su.member_id = m.member_id
        WHERE
            su.lesson_id = #{lessonId}
          AND su.deleted_at IS NULL
          AND m.deleted_at IS NULL
          AND su.lounge_yn = 1
        ORDER BY
            m.name ASC
    </select>

    <!-- 라운지 게시글 상세 한 건 조회 -->
    <select id="selectLoungePostDetail"
            resultMap="LoungePostMap">
        SELECT /*+ INDEX_ASC(lp PK_LOUNGE_POST) ORDERED */
            lp.lounge_post_id,
            lp.content,
            lp.notice_yn,
            lp.created_at,
            lm.member_id,
            lm.name,
            lm.profile_img_url
        FROM
            lounge_post lp
                LEFT JOIN member lm ON lp.member_id = lm.member_id
        WHERE
            lp.lounge_post_id = #{loungePostId}
            AND lp.deleted_at IS NULL
    </select>

    <!-- 라운지 게시글 댓글 조회 -->
    <select id="selectLoungeCommentList"
            resultMap="LoungeCommentMap">
        SELECT /*+ INDEX_ASC(lp PK_LOUNGE_COMMENT) ORDERED */
            lc.lounge_comment_id,
            lc.content,
            lc.created_at,
            lcm.member_id,
            lcm.name,
            lcm.profile_img_url
        FROM
            lounge_comment lc
                LEFT JOIN member lcm ON lc.member_id = lcm.member_id
        WHERE
            lc.lounge_post_id = #{loungePostId}
            AND lc.deleted_at IS NULL
        ORDER BY
            lc.lounge_comment_id ASC
    </select>

    <!-- 라운지 게시물 등록 -->
    <insert id="insertLoungePost" keyProperty="loungePostRequest.loungePostId">
        <selectKey keyProperty="loungePostRequest.loungePostId" resultType="long" order="BEFORE">
            SELECT lounge_post_seq.nextval from dual
        </selectKey>
        INSERT INTO lounge_post (lounge_post_id, member_id, lounge_id, content, notice_yn)
        VALUES (#{loungePostRequest.loungePostId}, #{memberId}, #{loungePostRequest.loungeId}, #{loungePostRequest.content}, #{loungePostRequest.noticeYn})
    </insert>

    <!-- 라운지 게시물 이미지 등록 -->
    <insert id="insertLoungePostImgUrls" parameterType="map">
        INSERT INTO lounge_post_img
        (lounge_post_img_id, lounge_post_id, post_img_url)
        SELECT lounge_post_img_seq.nextval, #{loungePostId}, A.post_img_url FROM (
        <foreach collection="postImgUrls" item="postImgUrl" separator="UNION ALL">
            SELECT #{postImgUrl} as post_img_url
            FROM DUAL
        </foreach>
        ) A
    </insert>

    <!-- 라운지 댓글 등록 -->
    <insert id="insertLoungeComment">
        INSERT INTO lounge_comment(lounge_comment_id, member_id, lounge_post_id, content)
        VALUES (lounge_comment_seq.nextval, #{memberId}, #{loungeComment.loungePostId}, #{loungeComment.content})
    </insert>

    <!-- 라운지 게시물 이미지 삭제 -->
    <update id="deleteLoungePostImgUrls">
        UPDATE lounge_post_img
        SET deleted_at = SYSDATE
        WHERE lounge_post_id = #{loungePostId}
        <choose>
            <when test="postImgUrls != null and !postImgUrls.isEmpty()">
                AND post_img_url IN
                <foreach item="postImgUrl" collection="postImgUrls" open="(" separator="," close=")">
                    #{postImgUrl}
                </foreach>
            </when>
        </choose>
    </update>

    <!-- 라운지 게시물 내용 수정 -->
    <update id="updateLoungePost">
        UPDATE lounge_post
        SET content = #{content},
            notice_yn = #{noticeYn}
        WHERE lounge_post_id = #{loungePostId}
    </update>

    <!-- 라운지 게시물 삭제 -->
    <update id="deleteLoungePost">
        UPDATE lounge_post
        SET deleted_at = SYSDATE
        WHERE lounge_post_id = #{loungePostId}
    </update>

    <!-- 라운지 댓글 삭제 -->
    <update id="deleteLoungeComment">
        UPDATE lounge_comment
        SET deleted_at = SYSDATE
        WHERE 1 = 1
            <if test="loungePostId != null">
                AND lounge_post_id = #{loungePostId}
            </if>
            <if test="loungeCommentId != null">
                AND lounge_comment_id = #{loungeCommentId}
            </if>
    </update>

    <!-- 라운지 게시글 수정 -->
    <update id="updateLoungePostImages" parameterType="map">
        MERGE INTO lounge_post_img lpi
        USING (
            <foreach item="item" collection="imgUrls" open="" close="" separator="UNION ALL">
                SELECT
                #{loungePostId} AS lounge_post_id,
                #{item} AS post_img_url,
                SYSDATE AS current_time
                FROM DUAL
            </foreach>
        ) src
        ON (lpi.lounge_post_id = src.lounge_post_id AND lpi.post_img_url = src.post_img_url)
        WHEN MATCHED THEN
            UPDATE SET lpi.deleted_at = src.current_time
        WHEN NOT MATCHED THEN
            INSERT (
                lounge_post_img_id,
                lounge_post_id,
                post_img_url,
                created_at
            )
            VALUES (
                lounge_post_img_seq.nextval,
                src.lounge_post_id,
                src.post_img_url,
                src.current_time
            )
    </update>

    <!-- 라운지 댓글 수정 -->
    <update id="updateLoungeComment">
        UPDATE lounge_comment
        SET content = #{content}
        WHERE lounge_comment_id = #{loungeCommentId}
    </update>

    <!-- 수강생 출석 데이터 넣기 -->
    <insert id="insertAttendanceList">
        INSERT INTO attendance (attendance_id, sugang_id, attendance_date, attendance_yn)
        SELECT attendance_seq.nextval, s.sugang_id, TO_DATE(#{currentTime}, 'YYYY-MM-DD'), 0
        FROM sugang s
        WHERE s.lesson_id = #{lessonId}
          AND NOT EXISTS (
            SELECT 1
            FROM attendance a
            WHERE a.sugang_id = s.sugang_id
              AND a.attendance_date = TO_DATE(#{currentTime}, 'YYYY-MM-DD')
            )
    </insert>

    <!-- 수강생 출석 데이터 조회 -->
    <select id="selectAttendanceStartedList" resultType="com.innerpeace.themoonha.domain.lounge.dto.AttendanceDTO">
        SELECT
            a.attendance_id,
            s.member_id,
            m.name,
            a.attendance_date,
            a.attendance_yn
        FROM
            attendance a
                JOIN
            sugang s ON a.sugang_id = s.sugang_id
                JOIN
            member m ON s.member_id = m.member_id
        WHERE
            s.lesson_id = #{lessonId}
                AND a.attendance_date = TO_DATE(#{currentTime}, 'YYYY-MM-DD')
    </select>

    <!-- 수강생 출석 여부 수정 -->
    <update id="updateAttendanceYn">
        UPDATE attendance
        SET attendance_yn =
            CASE
                WHEN attendance_yn = 0 THEN 1
                ELSE 0
            END
        WHERE attendance_id = #{attendanceId}
    </update>

</mapper>